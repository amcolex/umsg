// Generated with umsg_gen on {{ date }}
#include <umsg.h>
#include <umsg_{{topic_dict.name}}.h>

// msg instances
{% for msg_dict in topic_dict.msgs %}
{% set prefix = topic_dict.name+'_'+msg_dict.name%}
static umsg_msg_metadata_t msg_{{prefix}} = {.name = "{{prefix}}"};
{% endfor %}

// msg api's
{% for msg_dict in topic_dict.msgs %}
{% set prefix = topic_dict.name+'_'+msg_dict.name%}
// {{prefix}}
umsg_sub_handle_t umsg_{{prefix}}_subscribe(uint32_t prescaler, uint8_t length)
{
    return umsg_subscribe(&msg_{{prefix}}, prescaler, sizeof(umsg_{{prefix}}_t), length, 0);
}
umsg_sub_handle_t umsg_{{prefix}}_subscribe_ch(uint32_t prescaler, uint8_t length, uint8_t channel)
{
    return umsg_subscribe(&msg_{{prefix}}, prescaler, sizeof(umsg_{{prefix}}_t), length, channel);
}
void umsg_{{prefix}}_publish(umsg_{{prefix}}_t* data)
{
    umsg_publish(&msg_{{prefix}}, data, 0);
}
void umsg_{{prefix}}_publish_ch(umsg_{{prefix}}_t* data, uint8_t channel)
{
    umsg_publish(&msg_{{prefix}}, data, channel);
}
uint8_t umsg_{{prefix}}_receive(umsg_sub_handle_t queue, umsg_{{prefix}}_t* data, uint32_t timeout)
{
    return umsg_receive(queue, data, timeout);
}
uint8_t umsg_{{prefix}}_peek(umsg_{{prefix}}_t* data)
{
    return umsg_peek(&msg_{{prefix}}, data, sizeof(umsg_{{prefix}}_t));
}
{%if log == "do_log" %}
uint32_t umsg_{{prefix}}_serialize(umsg_{{prefix}}_t* data, uint8_t* buffer)
{
    uint32_t len = 2;
    buffer[0] = UMSG_{{topic_dict.name.upper()}};
    buffer[1] = {{topic_dict.name.upper()}}_{{msg_dict.name.upper()}};
    char *flattened_data = (char *)data;
    //this can probably be replaced by memcpy but it is done like this for now just to be safe
    for(uint32_t i = 0; i < sizeof(umsg_{{prefix}}_t);i++)
    {
        buffer[len] = flattened_data[i];
        len++;
    }
    return len;
}

//for now lets assume that there are less than 255 message classes and 255 message types per class, this has to be fixed in the future
uint8_t umsg_{{prefix}}_deserialize(umsg_{{prefix}}_t* data,uint8_t* buffer)
{
    if(buffer[0]!=UMSG_{{topic_dict.name.upper()}} || buffer[1] !={{topic_dict.name.upper()}}_{{msg_dict.name.upper()}})
    {
        return 0;
    }

    uint32_t offset = 2;
    char *flattened_data = (char *)data;
    //this can probably be replaced by memcpy but it is done like this for now just to be safe
    for(uint32_t i = 0; i < sizeof(umsg_{{prefix}}_t);i++)
    {
        flattened_data[i] = buffer[offset];
        offset++;
    }

    return 1;
}
{% endif  %}
{% endfor %}

